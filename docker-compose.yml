# docker-compose.yml
services:
  # MySQL 데이터베이스 서비스
  db:
    container_name: db-container                # 컨테이너 이름
    image: mysql:8.0                            # 사용할 MySQL 이미지
    volumes:
      - db-volume:/var/lib/mysql                # 데이터 지속성용 볼륨 매핑
    env_file:
      - .env                                    # 환경변수 파일 로드
    networks:
      - db-connect                              # 연결할 네트워크
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]  # 헬스체크 명령어
      interval: 10s                             # 헬스체크 간격
      timeout: 5s                               # 헬스체크 타임아웃
      retries: 3                                # 재시도 횟수
      start_period: 30s                         # 시작 후 헬스체크 시작 전 대기 시간

  # 백엔드 애플리케이션 서비스
  backend:
    container_name: backend-container           # 컨테이너 이름
    build:
      context: ./backend                        # 빌드 컨텍스트 (소스코드 위치)
    image: cloakingghost/backend:latest          # 빌드 후 사용할 이미지
    env_file:
      - .env                                    # 환경변수 파일 로드
    networks:
      - db-connect                              # 데이터베이스 네트워크 연결
      - backend-connect                         # 백엔드 전용 네트워크 연결
    depends_on:
      db:
        condition: service_healthy              # db 서비스 헬스체크 후 시작

  # 프론트엔드 애플리케이션 서비스
  frontend:
    container_name: frontend-container          # 컨테이너 이름
    build:
      context: ./frontend                       # 빌드 컨텍스트 (소스코드 위치)
      args:
        VITE_API_URL: ${VITE_API_URL}           # 빌드 시 전달할 아규먼트
    image: cloakingghost/frontend:latest         # 빌드 후 사용할 이미지
    ports:
      - "80:80"                                 # 호스트:컨테이너 포트 매핑
    networks:
      - backend-connect                         # 백엔드 전용 네트워크 연결
    depends_on:
      - backend                                 # 백엔드 서비스에 의존
      - db                                      # db 서비스에 의존

# 데이터 지속성을 위한 볼륨 정의
volumes:
  db-volume:

# 컨테이너 간 통신용 네트워크 정의
networks:
  db-connect:
  backend-connect:
