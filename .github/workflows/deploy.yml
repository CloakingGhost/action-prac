# cache 제어 구문 추가

# 워크플로우의 이름
name: deploy service

on: 
  # 워크플로우 실행 조건 이벤트
  push:
    # 워크플로우 실행 조건 브랜치
    branches:
      - main

jobs:
    # 작업 이름
  deploy:
      # 실행 환경
    runs-on: ubuntu-24.04

      # 어떤 작업을 하는지
    steps:
      # 작업의 이름
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # 디스코드로 메세지 전송 (Channel 1)
      - name: Start Message (Channel 1)
        # 라이브러리 개발자/라이브러리 이름@버전
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 시작한다. 배포.


      # 디스코드로 메세지 전송 (Channel 2)
      - name: Start Message (Channel 2)
        # 라이브러리 개발자/라이브러리 이름@버전
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_JAEHYEON }}
          title: 시작한다. 배포.
      
      # 캐시 저장 설정을 위한 actions(라이브러리)
      - name: Cache Docker Image Layer
        # actions/cache : 깃허브 캐시 저장소 활용을 위한 라이브러리
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          # cache를 구분하기 위한 식별자
          # 같은 이름으로 하면 캐싱이 유지됨
          key: docker-${{ github.sha }}



        # 작업의 이름
      - name: run ssh-agent, webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # 깃허브 액션 워크스페이스 기준으로 EC2가 안전한지 확인해야함
      # finger-print
      # 원격 서버를 신회할 수 있는 서버로 등록하는 과정
      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      # 깃허브 액션 워크스페이스에 저장한 환경변수로 .env 파일 생성
      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "BACKEND_SERVER_URL=${{ secrets.BACKEND_SERVER_URL }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
      
      # 이미지 빌드 전에 수행해야함
      # 도커 Buildkit 엔진 설정 action
      - name: Set up Docker Buildkit
        # setup-buildx-action
          # Workspace의 Buildkit 엔진을 설치하는 action
          # buildx: Buildkit 관련 명령어 모음
        # buildx = Buildkit
        # 캐시를 내가 제어 하기위한 라이브러리
        # 캐시는 원래 도커가 관리하는데 이것을 직접 내가 관리하여 깃허브에 caches로 데이터를 보내기 위함
        # 도커에는 이런기능이 없어서 라이브러리를 설치
        uses: docker/setup-buildx-action@v3

      # Buildkit Engine Builder(이미지를 빌드하는 도구: 이미지 빌드해 줌) 생성
      # 기존 Docker Builder : Cache 파일 저장&불러오기 경로 제어 불가
      # 기존 Docker Builder 대신 Buildkit으로 대체하는 과정
      - name: Create Buildkit Builder
        # 1. Buildkit Builder를 생성하는 명령어
        # 2. Builder 설정 명령어
        run: |
          docker buildx create --use --name buildkit
          docker buildx use buildkit



      - name: Docker Image Build
        # run: docker compose build
        run: docker compose build --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Docker Image Push
        run: docker compose push
        
        # SSH로 EC2에 접근
        # EC2에 docker-compose.yml, .env 복사

      - name: Copy .env / docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml, .env"
          target: "~/work-directory"

        # SSH로 EC2에 접근
        # 복사한 2개의 파일을 실행 시키기 위함

      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # docker rm -f $(docker ps -aq)
            cd ~/work-directory
            sudo docker compose pull
            sudo docker compose down
            sudo docker compose up -d
            sudo docker image prune -f




        # 액션 종료 알림 메세지 (Channel 1)
      - name: End Message - Success (Channel 1)
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 성공했다. 배포.

        # 액션 종료 알림 메세지 (Channel 2)
      - name: End Message - Success (Channel 2)
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_JAEHYEON }}
          title: 성공했다. 배포.

        # 액션 실패 알림 메세지 (Channel 1)
      - name: End Message - Fail (Channel 1)
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: 실패했다. 배포.

        # 액션 실패 알림 메세지 (Channel 2)
      - name: End Message - Fail (Channel 2)
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_JAEHYEON }}
          title: 실패했다. 배포.
    