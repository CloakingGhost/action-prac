# 워크플로우의 이름
name: deploy service

on: 
  # 워크플로우 실행 조건 이벤트
  push:
    # 워크플로우 실행 조건 브랜치
    branches:
      - main

jobs:
    # 작업 이름
  deploy:
      # 실행 환경
    runs-on: ubuntu-24.04

      # 어떤 작업을 하는지
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        # 작업의 이름
      - name: run ssh-agent, webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # 깃허브 액션 워크스페이스 기준으로 EC2가 안전한지 확인해야함
      # finger-print
      # 원격 서버를 신회할 수 있는 서버로 등록하는 과정
      - name: Add Remote Server Fingerprint to Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts || true

      # 깃허브 액션 워크스페이스에 저장한 환경변수로 .env 파일 생성
      - name: Create .env file
        run: |
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
      
      - name: Docker Image Build
        run: docker compose build

      - name: Login DockerHub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Docker Image Push
        run: docker compose push

        # EC2에 docker-compose.yml, .env 복사

      - name: Copy .env / docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml,.env"
          target: "~/work-directory"

        # SSH로 EC2에 접근
        # 복사한 2개의 파일을 실행 시키기 위함

      - name: Pull Image & Up Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # docker rm -f $(docker ps -aq)
            cd ~/work-directory
            docker-compose pull
            docker-compose down
            docker-compose up -d
    